# coding: utf-8

"""
    Robocorp Control Room API

    Robocorp Control Room API

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from robocorp.workspace.models.list_assets200_response_data_inner import ListAssets200ResponseDataInner

class ListAssets200Response(BaseModel):
    """
    ListAssets200Response
    """
    data: conlist(ListAssets200ResponseDataInner) = Field(...)
    has_more: StrictBool = Field(..., description="Whether or not there are more elements available after this set. If false, this set comprises the end of the list.")
    next: Optional[StrictStr] = Field(..., description="The full URL to access the next set of results. Null if there are no next set of results.")
    __properties = ["data", "has_more", "next"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ListAssets200Response:
        """Create an instance of ListAssets200Response from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in data (list)
        _items = []
        if self.data:
            for _item in self.data:
                if _item:
                    _items.append(_item.to_dict())
            _dict['data'] = _items
        # set to None if next (nullable) is None
        # and __fields_set__ contains the field
        if self.next is None and "next" in self.__fields_set__:
            _dict['next'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ListAssets200Response:
        """Create an instance of ListAssets200Response from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ListAssets200Response.parse_obj(obj)

        _obj = ListAssets200Response.parse_obj({
            "data": [ListAssets200ResponseDataInner.from_dict(_item) for _item in obj.get("data")] if obj.get("data") is not None else None,
            "has_more": obj.get("has_more"),
            "next": obj.get("next")
        })
        return _obj


